WEB.API disponible à partir de .NET 4.5
dans l'idéal migrer sur .NET Core (web api et mvc dispo dans la mm librairie)

OWIN
permet de faire tourner les app sur d'autres serveurs que IIS

DAPPER
mapping objet BDD par reflexion


WEB API penser ressources et non action
HHTP HEAD pour vérifier l'existence d'une ressources sans la loader, on récupère seulement l'entete

DDD domain driven design ?

F5 : VIP -> POOL -> batterie de serveurs IIS

SWAGGER

types references/types valeurs
ex : string valeur, stringbuilder reference

dans une route de web api les param types valeurs sont dans l'uri et les param type references (objets complexes)
sont dans le body
pour modifier ce comportement il faut ajouter les attributs fromBody ou fromUri aux param dans la déclaration de la route

methode d'extension
methode statique pour factoriser un comportement basique
convient aux tools et ne convient pas au métier

taches asynchrones :
utiliser le type Task pour faire des taches asynchrones pour libérer les thread

exercices :
créer un produit
créer une API en PUT pour modifier un produit

software craftmanship
code smell

IHttpControllerSelector 
MessageHandler

génération de token sécurisé
JWT 
AWS https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html

ROTI roti return on time investment

Unity : RegisterSingleton au lieu de RegisterType
vérifier que pour les accès BDD la connexion est ouverte/fermée sur chaque requête et non sur l'instanciation du repo

pour faire des tests unitaires il faut avoir au moins des methodes dédiées à une action et de l'injection de dépendance par interface pour mocker les dépendances
1 test = 1 action çàd 1 assert ou un groupe d'asset liés à une action
comment mettre ça en place chez terdav ???
pyramide de tests
package moq pour faire des mocks dans les tests

framework de tests : MSTEST, NUNIT, XUNIT (le plus extensible)
NCrunch outil payant avec un mois de test gratuit : live testing (test en temps réèl)


OWIN Katana permet de faire tourner du .Net Standard sur un serveur non IIS

dotpick decompiler des ddl pour voir le code